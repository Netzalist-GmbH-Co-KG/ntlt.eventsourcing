@page "/sessions"
@using ntlt.eventsourcing.UI.Components.UI
@using ntlt.eventsourcing.UI.Services
@inject ApiClient ApiClient
@inject SessionService SessionService
@inject NavigationManager Navigation

<div class="page-container">
    <div class="page-header">
        <div>
            <h1 class="page-title">Session Management</h1>
            <p class="page-description">Track and manage active sessions</p>
        </div>
    </div>

    <div class="stats-grid stats-grid-3">
        <Card>
            <div class="stat-card">
                <div class="stat-icon stat-icon-primary">
                    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <circle cx="12" cy="12" r="10"></circle>
                        <polyline points="12 6 12 12 16 14"></polyline>
                    </svg>
                </div>
                <div class="stat-content">
                    <div class="stat-label">Total Sessions</div>
                    <div class="stat-value">@_sessions.Count</div>
                </div>
            </div>
        </Card>

        <Card>
            <div class="stat-card">
                <div class="stat-icon stat-icon-success">
                    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <polyline points="22 12 18 12 15 21 9 3 6 12 2 12"></polyline>
                    </svg>
                </div>
                <div class="stat-content">
                    <div class="stat-label">Active Sessions</div>
                    <div class="stat-value">@_sessions.Count(s => !s.Closed)</div>
                </div>
            </div>
        </Card>

        <Card>
            <div class="stat-card">
                <div class="stat-icon stat-icon-danger">
                    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <circle cx="12" cy="12" r="10"></circle>
                        <line x1="15" y1="9" x2="9" y2="15"></line>
                        <line x1="9" y1="9" x2="15" y2="15"></line>
                    </svg>
                </div>
                <div class="stat-content">
                    <div class="stat-label">Closed Sessions</div>
                    <div class="stat-value">@_sessions.Count(s => s.Closed)</div>
                </div>
            </div>
        </Card>
    </div>

    <Card Title="All Sessions" Description="@($"{_sessions.Count} session(s) tracked")">
        @if (_sessions.Any())
        {
            <div class="table-container">
                <table class="data-table">
                    <thead>
                        <tr>
                            <th>Session ID</th>
                            <th>Created At</th>
                            <th>Last Accessed</th>
                            <th>Duration</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var session in _sessions.OrderByDescending(s => s.CreatedAt))
                        {
                            var isCurrentSession = SessionService.BearerToken == session.SessionId.ToString();
                            <tr class="@(isCurrentSession ? "row-highlight" : "")">
                                <td>
                                    <div class="session-id">
                                        <code>@session.SessionId.ToString()[..8]...</code>
                                        @if (isCurrentSession)
                                        {
                                            <Badge Variant="Badge.BadgeVariant.Info">Current</Badge>
                                        }
                                    </div>
                                </td>
                                <td>
                                    <div class="timestamp">
                                        @session.CreatedAt.ToLocalTime().ToString("g")
                                    </div>
                                </td>
                                <td>
                                    <div class="timestamp">
                                        @session.LastAccessedAt.ToLocalTime().ToString("g")
                                    </div>
                                </td>
                                <td>
                                    @{
                                        var duration = session.LastAccessedAt - session.CreatedAt;
                                        var durationText = duration.TotalMinutes < 1
                                            ? $"{(int)duration.TotalSeconds}s"
                                            : duration.TotalHours < 1
                                                ? $"{(int)duration.TotalMinutes}m"
                                                : $"{(int)duration.TotalHours}h {duration.Minutes}m";
                                    }
                                    <span class="duration">@durationText</span>
                                </td>
                                <td>
                                    @if (session.Closed)
                                    {
                                        <Badge Variant="Badge.BadgeVariant.Default">Closed</Badge>
                                    }
                                    else
                                    {
                                        <Badge Variant="Badge.BadgeVariant.Success">Active</Badge>
                                    }
                                </td>
                                <td>
                                    @if (!session.Closed && !isCurrentSession)
                                    {
                                        <Button
                                            Size="Button.ButtonSize.Small"
                                            Variant="Button.ButtonVariant.Danger"
                                            OnClick="() => EndSession(session.SessionId)">
                                            End
                                        </Button>
                                    }
                                    else if (isCurrentSession)
                                    {
                                        <span class="text-muted">Current</span>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="empty-state">
                <svg width="64" height="64" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1" style="opacity: 0.3; margin-bottom: 16px;">
                    <circle cx="12" cy="12" r="10"></circle>
                    <polyline points="12 6 12 12 16 14"></polyline>
                </svg>
                <p>No sessions found</p>
            </div>
        }
    </Card>
</div>

@code {
    private List<SessionDto> _sessions = new();
    private System.Threading.Timer? _refreshTimer;

    protected override async Task OnInitializedAsync()
    {
        if (!SessionService.HasSession)
        {
            Navigation.NavigateTo("/login");
            return;
        }

        await LoadSessions();
    }

    private async Task LoadSessions()
    {
        _sessions = await ApiClient.GetSessionsAsync();
        StateHasChanged();
    }


    private async Task EndSession(Guid sessionId)
    {
        var success = await ApiClient.EndSpecificSessionAsync(sessionId);
        if (success)
        {
            await LoadSessions();
        }
    }

    public void Dispose()
    {
        _refreshTimer?.Dispose();
    }
}
