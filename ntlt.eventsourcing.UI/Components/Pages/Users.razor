@page "/users"
@using ntlt.eventsourcing.UI.Components.UI
@using ntlt.eventsourcing.UI.Services
@inject ApiClient ApiClient
@inject SessionService SessionService
@inject NavigationManager Navigation

<div class="page-container">
    <div class="page-header">
        <div>
            <h1 class="page-title">User Management</h1>
            <p class="page-description">Manage users with CQRS commands</p>
        </div>
        <Button OnClick="ToggleCreateForm">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" style="margin-right: 8px;">
                <line x1="12" y1="5" x2="12" y2="19"></line>
                <line x1="5" y1="12" x2="19" y2="12"></line>
            </svg>
            Create User
        </Button>
    </div>

    @if (_showCreateForm)
    {
        <Card Title="Create New User" Description="Add a new user to the system">
            <div class="form-container">
                <Input
                    Label="Username"
                    Placeholder="Enter username"
                    Value="@_newUserName"
                    ValueChanged="@(v => _newUserName = v)"
                    Error="@_usernameError" />

                <Input
                    Label="Email"
                    Type="email"
                    Placeholder="user@example.com"
                    Value="@_newEmail"
                    ValueChanged="@(v => _newEmail = v)"
                    Error="@_emailError" />
            </div>
            <div slot="Footer" class="form-actions">
                <Button Variant="Button.ButtonVariant.Ghost" OnClick="CancelCreate">Cancel</Button>
                <Button OnClick="CreateUser">Create User</Button>
            </div>
        </Card>
    }

    <Card Title="All Users" Description="@($"{_users.Count} user(s) registered")">
        @if (_users.Any())
        {
            <div class="table-container">
                <table class="data-table">
                    <thead>
                        <tr>
                            <th>Username</th>
                            <th>Email</th>
                            <th>Status</th>
                            <th>Password</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var user in _users)
                        {
                            <tr class="@(user.IsDeactivated ? "row-deactivated" : "")">
                                <td>
                                    <div class="cell-content">
                                        <div class="user-avatar">@user.UserName[0].ToString().ToUpper()</div>
                                        <span class="font-medium">@user.UserName</span>
                                    </div>
                                </td>
                                <td>
                                    @if (_editingEmailUserId == user.UserId)
                                    {
                                        <div class="inline-edit">
                                            <input class="input input-sm" type="email" @bind="_editEmailValue" />
                                            <Button Size="Button.ButtonSize.Small" OnClick="() => SaveEmail(user.UserId)">Save</Button>
                                            <Button Size="Button.ButtonSize.Small" Variant="Button.ButtonVariant.Ghost" OnClick="CancelEmailEdit">Cancel</Button>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="cell-with-action">
                                            <span>@user.Email</span>
                                            @if (!user.IsDeactivated)
                                            {
                                                <button class="action-link" @onclick="() => StartEmailEdit(user.UserId, user.Email)">Edit</button>
                                            }
                                        </div>
                                    }
                                </td>
                                <td>
                                    @if (user.IsDeactivated)
                                    {
                                        <Badge Variant="Badge.BadgeVariant.Danger">Deactivated</Badge>
                                    }
                                    else
                                    {
                                        <Badge Variant="Badge.BadgeVariant.Success">Active</Badge>
                                    }
                                </td>
                                <td>
                                    @if (user.HasPassword)
                                    {
                                        <Badge Variant="Badge.BadgeVariant.Info">Set</Badge>
                                    }
                                    else if (!user.IsDeactivated)
                                    {
                                        @if (_settingPasswordUserId == user.UserId)
                                        {
                                            <div class="inline-edit">
                                                <input class="input input-sm" type="password" @bind="_passwordValue" placeholder="Password" />
                                                <Button Size="Button.ButtonSize.Small" OnClick="() => SavePassword(user.UserId)">Save</Button>
                                                <Button Size="Button.ButtonSize.Small" Variant="Button.ButtonVariant.Ghost" OnClick="CancelPasswordEdit">Cancel</Button>
                                            </div>
                                        }
                                        else
                                        {
                                            <button class="action-link" @onclick="() => StartPasswordEdit(user.UserId)">Set Password</button>
                                        }
                                    }
                                    else
                                    {
                                        <span class="text-muted">-</span>
                                    }
                                </td>
                                <td>
                                    @if (!user.IsDeactivated)
                                    {
                                        <Button
                                            Size="Button.ButtonSize.Small"
                                            Variant="Button.ButtonVariant.Danger"
                                            OnClick="() => DeactivateUser(user.UserId)">
                                            Deactivate
                                        </Button>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="empty-state">
                <svg width="64" height="64" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1" style="opacity: 0.3; margin-bottom: 16px;">
                    <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
                    <circle cx="12" cy="7" r="4"></circle>
                </svg>
                <p>No users found. Create your first user to get started!</p>
            </div>
        }
    </Card>
</div>

@code {
    private List<UserDto> _users = new();
    private System.Threading.Timer? _refreshTimer;

    private bool _showCreateForm = false;
    private string _newUserName = string.Empty;
    private string _newEmail = string.Empty;
    private string? _usernameError;
    private string? _emailError;

    private Guid? _editingEmailUserId;
    private string _editEmailValue = string.Empty;

    private Guid? _settingPasswordUserId;
    private string _passwordValue = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if (!SessionService.HasSession)
        {
            Navigation.NavigateTo("/login");
            return;
        }

        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        _users = await ApiClient.GetUsersAsync();
        StateHasChanged();
    }

    private void ToggleCreateForm()
    {
        _showCreateForm = !_showCreateForm;
        if (!_showCreateForm)
        {
            ResetCreateForm();
        }
    }

    private void ResetCreateForm()
    {
        _newUserName = string.Empty;
        _newEmail = string.Empty;
        _usernameError = null;
        _emailError = null;
    }

    private async Task CreateUser()
    {
        _usernameError = null;
        _emailError = null;

        if (string.IsNullOrWhiteSpace(_newUserName))
        {
            _usernameError = "Username is required";
            return;
        }

        if (string.IsNullOrWhiteSpace(_newEmail))
        {
            _emailError = "Email is required";
            return;
        }

        var userId = await ApiClient.CreateUserAsync(_newUserName, _newEmail);
        if (userId != null)
        {
            await LoadUsers();
            ToggleCreateForm();
        }
    }

    private void CancelCreate()
    {
        ToggleCreateForm();
    }

    private void StartEmailEdit(Guid userId, string currentEmail)
    {
        _editingEmailUserId = userId;
        _editEmailValue = currentEmail;
    }

    private async Task SaveEmail(Guid userId)
    {
        var success = await ApiClient.ChangeEmailAsync(userId, _editEmailValue);
        if (success)
        {
            await LoadUsers();
            CancelEmailEdit();
        }
    }

    private void CancelEmailEdit()
    {
        _editingEmailUserId = null;
        _editEmailValue = string.Empty;
    }

    private void StartPasswordEdit(Guid userId)
    {
        _settingPasswordUserId = userId;
        _passwordValue = string.Empty;
    }

    private async Task SavePassword(Guid userId)
    {
        if (string.IsNullOrWhiteSpace(_passwordValue))
        {
            return;
        }

        var success = await ApiClient.AddPasswordAsync(userId, _passwordValue);
        if (success)
        {
            await LoadUsers();
            CancelPasswordEdit();
        }
    }

    private void CancelPasswordEdit()
    {
        _settingPasswordUserId = null;
        _passwordValue = string.Empty;
    }

    private async Task DeactivateUser(Guid userId)
    {
        var success = await ApiClient.DeactivateUserAsync(userId);
        if (success)
        {
            await LoadUsers();
        }
    }


    public void Dispose()
    {
        _refreshTimer?.Dispose();
    }
}
